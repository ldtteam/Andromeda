global:
  storageClass: longhorn
  postgresql:
    password: teamcity
    postgresPassword: teamcity

image:
  repository: jetbrains/teamcity-server
  tag: latest
  pullPolicy: Always
  imagePullSecrets: []

replicas: 3

ingress:
  enabled: true
  annotations:
    cert-manager.io/cluster-issuer: letsencrypt-prod
    kubernetes.io/ingress.class: nginx
  hosts:
    - host: teamcity.cluster.ldtteam.com
  tls:
    - secretName: teamcity-tls
      hosts:
        - teamcity.cluster.ldtteam.com

## Teamcity deployed by StateFulSet
## @param teamcity.resources default value for all nodes in sts
teamcity:
  resources:
    requests:
      cpu: 100m
      memory: 2048Mi
  ## @param teamcity.env default values for all nodes in sts
  env:
    TEAMCITY_SERVER_MEM_OPTS: -Xms2g -Xmx4g
    POD_NAME:
      valueFrom:
        fieldRef:
          fieldPath: metadata.name
  startupProbe: ~
  livenessProbe:
    httpGet:
      path: /healthCheck/healthy
      port: http
      scheme: HTTP
    failureThreshold: 3
    periodSeconds: 30
  readinessProbe:
    httpGet:
      path: /healthCheck/ready
      port: http
      scheme: HTTP
    failureThreshold: 2
    periodSeconds: 10
  ports:
  - containerPort: 8111
    name: http
    protocol: TCP
  affinity: {}
  tolerations: {}
  topologySpreadConstraints: {}

pdb:
  enabled: true
  minAvailable: 1

pvc:
  name: teamcity-server-data
  annotations:
    helm.sh/resource-policy: keep
  storageClassName: longhorn
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 50Gi

database:
  host: "ldtteam-teamcity-postgres-pgpool"
  name: "teamcity"
  user: "teamcity"
  password: "password"

configMap:
  optConf:
    server.xml: |-
      <?xml version="1.0" encoding="UTF-8"?>
      <Server port="8105" shutdown="SHUTDOWN">
        <Listener className="org.apache.catalina.startup.VersionLoggerListener" />
        <Listener className="org.apache.catalina.core.AprLifecycleListener" SSLEngine="on" />
        <!-- Prevent memory leaks due to use of particular java/javax APIs-->
        <Listener className="org.apache.catalina.core.JreMemoryLeakPreventionListener" />
        <Listener className="org.apache.catalina.mbeans.GlobalResourcesLifecycleListener" />
        <Listener className="org.apache.catalina.core.ThreadLocalLeakPreventionListener" />
        <GlobalNamingResources>
          <Resource name="UserDatabase" auth="Container" type="org.apache.catalina.UserDatabase" description="User database that can be updated and saved" factory="org.apache.catalina.users.MemoryUserDatabaseFactory" pathname="conf/tomcat-users.xml" />
        </GlobalNamingResources>
        <Service name="Catalina">
          <Connector port="8111" protocol="org.apache.coyote.http11.Http11NioProtocol" connectionTimeout="60000" redirectPort="8543" useBodyEncodingForURI="true" tcpNoDelay="1" />
          <Engine name="Catalina" defaultHost="localhost">
            <Realm className="org.apache.catalina.realm.LockOutRealm">
              <Realm className="org.apache.catalina.realm.UserDatabaseRealm" resourceName="UserDatabase" />
            </Realm>
            <Host name="localhost" appBase="webapps" unpackWARs="true" autoDeploy="true">
              <Valve className="org.apache.catalina.valves.ErrorReportValve" showReport="false" showServerInfo="false" />
              <Valve className="org.apache.catalina.valves.RemoteIpValve" remoteIpHeader="x-forwarded-for" protocolHeader="x-forwarded-proto" portHeader="x-forwarded-port" />
            </Host>
          </Engine>
        </Service>
      </Server>

postgresql:
  pdb:
    create: false
  password: teamcity
  volumePermissions:
    enabled: true
    securityContext:
      enabled: false
      runAsUser: root
  metrics:
    enabled: true
    serviceMonitor:
      enabled: true
      namespace: prometheus
  persistence:
    enabled: true
    storageClass: "longhorn"
    accessModes:
      - ReadWriteOnce
    size: 50Gi

pgpool:
  adminPassword: teamcity

initdbScripts:
  init.sql:|
  GRANT admins TO postgres;